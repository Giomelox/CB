import tkinter as tk
from tkinter import filedialog, simpledialog
import pandas as pd
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.styles.borders import Border, Side

# Variável para armazenar os arquivos selecionados
arquivos_selecionados = []

def formatar_linha(worksheet, cor_fundo, cor_fonte, cor_borda):
    for linha in worksheet.iter_rows(min_row = 1, max_row = 1, min_col = 1, max_col = 13):
        for celula in linha:
            celula.fill = PatternFill(start_color = cor_fundo, end_color = cor_fundo, fill_type = 'solid')
            celula.font = Font(color = cor_fonte, name = 'calibri', size = 11, bold = True)
            celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = True)
            celula.border = Border(left = Side (style = 'thin', color = cor_borda),
                                   right = Side (style = 'thin', color = cor_borda),
                                   top = Side (style = 'thin', color = cor_borda),
                                   bottom = Side (style = 'thin', color = cor_borda),
                                   )

def formatar_linha1(worksheet, cor_fundo, cor_fonte, cor_borda):
    for linha in worksheet.iter_rows(min_row = 1, max_row = 1, min_col = 1, max_col = 3):
        for celula in linha:
            celula.fill = PatternFill(start_color = cor_fundo, end_color = cor_fundo, fill_type = 'solid')
            celula.font = Font(color = cor_fonte, name = 'calibri', size = 11, bold = True)
            celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = True)
            celula.border = Border(left = Side (style = 'thin', color = cor_borda),
                                   right = Side (style = 'thin', color = cor_borda),
                                   top = Side (style = 'thin', color = cor_borda),
                                   bottom = Side (style = 'thin', color = cor_borda),
                                   )
            
def formatar_linha2(worksheet, cor_fundo, cor_fonte, cor_borda):
    for linha in worksheet.iter_rows(min_row = 1, max_row = 1, min_col = 1, max_col = 5):
        for celula in linha:
            celula.fill = PatternFill(start_color = cor_fundo, end_color = cor_fundo, fill_type = 'solid')
            celula.font = Font(color = cor_fonte, name = 'calibri', size = 11, bold = True)
            celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = True)
            celula.border = Border(left = Side (style = 'thin', color = cor_borda),
                                   right = Side (style = 'thin', color = cor_borda),
                                   top = Side (style = 'thin', color = cor_borda),
                                   bottom = Side (style = 'thin', color = cor_borda),
                                   )

def formatar_linha3(worksheet, cor_fundo, cor_fonte, cor_borda):
    for linha in worksheet.iter_rows(min_row = 2, max_row = 2, min_col = 1, max_col = 3):
        for celula in linha:
            celula.fill = PatternFill(start_color = cor_fundo, end_color = cor_fundo, fill_type = 'solid')
            celula.font = Font(color = cor_fonte, name = 'calibri', size = 11, bold = True)
            celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = True)
            celula.border = Border(left = Side (style = 'thin', color = cor_borda),
                                   right = Side (style = 'thin', color = cor_borda),
                                   top = Side (style = 'thin', color = cor_borda),
                                   bottom = Side (style = 'thin', color = cor_borda),
                                   )


def exibir_mensagem(mensagem):
    campo_texto.insert(tk.END, mensagem + "\n")
    campo_texto.see(tk.END)  # Rola automaticamente para a última linha

def selecionar_arquivos():
    global arquivos_selecionados
    # Abrir janela para selecionar arquivos
    arquivos = filedialog.askopenfilenames(
        title="Selecione um ou mais arquivos", 
        filetypes=[("Planilhas Excel", "*.xlsx")]
    )
    
    # Armazenar os arquivos selecionados na variável
    arquivos_selecionados = list(arquivos)

    # Mostrar os arquivos na GUI
    if arquivos_selecionados:
        lista_arquivos.delete(0, tk.END)  # Limpar a lista antes de adicionar novos itens
        for arquivo in arquivos_selecionados:
            lista_arquivos.insert(tk.END, arquivo)

def processar_arquivos():
    # Criar um dicionário para armazenar os DataFrames de cada arquivo
    dataframes = {}
    
    # Processar cada arquivo selecionado
    for arquivo in arquivos_selecionados:
        # Extrair o nome do arquivo (sem o caminho)
        nome_arquivo = arquivo.split("/")[-1]
        
        # Verificar se o nome do arquivo é 'Operações diárias do mês.xlsx'
        if nome_arquivo == 'Operações diárias do mês.xlsx':
            try:
                # Carregar o arquivo Excel para listar as planilhas
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names  # Lista as planilhas disponíveis
                
                # Pedir ao usuário para escolher a planilha
                planilha_escolhida = simpledialog.askstring(
                    "Escolha da Planilha",
                    f"As planilhas disponíveis para o arquivo {nome_arquivo} são:\n{planilhas}\n\nPor favor, insira o nome da planilha que deseja processar:"
                )
                
                if planilha_escolhida and planilha_escolhida in planilhas:
                    # Carregar o DataFrame da planilha escolhida
                    df_OP = pd.read_excel(arquivo, sheet_name = 'Reports')
                    
                    # Selecionar as linhas e colunas desejadas
                    valores = df_OP.iloc[88:95, [0, 1, 3]]
                    valores.columns = ['Centros', 'Vendas', 'Contas']
                    
                    # Armazenar o DataFrame no dicionário usando o nome do arquivo como chave
                    dataframes[nome_arquivo] = valores
                    
                    # Salvar o DataFrame em um novo arquivo Excel
                    valores.to_excel(f'{nome_arquivo}', 
                                     sheet_name = 'Operações diárias do mês', 
                                     index = False, 
                                     header = True)
                    
                    exibir_mensagem(f"Processado: {nome_arquivo}")
                else:
                    exibir_mensagem("Planilha não encontrada", f"A planilha '{planilha_escolhida}' não foi encontrada no arquivo {nome_arquivo}")
            
            except Exception as e:
                exibir_mensagem(f"Erro ao processar o arquivo {nome_arquivo}: {e}")

#=========================================================================================================================================================================================
        
    # Verificar se o nome do arquivo é 'Mix de vendas.xlsx'
        elif nome_arquivo == 'Mix de vendas.xlsx':
            try:
                # Carregar o arquivo Excel para listar as planilhas
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names  # Lista as planilhas disponíveis
                
                # Pedir ao usuário para escolher a planilha
                planilha_escolhida = simpledialog.askstring(
                    "Escolha da Planilha",
                    f"As planilhas disponíveis para o arquivo {nome_arquivo} são:\n{planilhas}\n\nPor favor, insira o nome da planilha que deseja processar:"
                )
                
                if planilha_escolhida and planilha_escolhida in planilhas:

                    # Carregar o DataFrame da planilha escolhida
                    df_funcionarios = pd.read_excel(arquivo, sheet_name = 'Mix de Vendas de Funcionários')
                    
                    # Selecionar as colunas e linhas relevantes
                    funcionarios = df_funcionarios.iloc[6:, [3, 6, 7, 8]]
                    funcionarios.columns = ['Nº de vendas', 'Nome do funcionário', 'Nome do grupo de família', 'Nome do grupo principal']

                    # Ordenar as colunas
                    funcionarios = funcionarios.sort_values(['Nome do funcionário', 'Nome do grupo de família', 'Nome do grupo principal', 'Nº de vendas'])

                    # Agrupar por funcionário e grupos
                    funcionarios_grouped = funcionarios.groupby(['Nome do funcionário', 'Nome do grupo de família', 'Nome do grupo principal', 'Nº de vendas']).size().reset_index(name='Quantidade')

                    # Agrupar e somar as vendas por funcionário e grupos
                    resultado = funcionarios_grouped.groupby(['Nome do funcionário', 'Nome do grupo de família', 'Nome do grupo principal']).sum().reset_index()
                    
                    # Armazenar o DataFrame no dicionário
                    dataframes[nome_arquivo] = resultado
                    
                    # Salvar o DataFrame em um novo arquivo Excel
                    resultado.to_excel(f'{nome_arquivo}', 
                                       sheet_name = 'Resumo de Vendas', 
                                       index = False)
                    
                    exibir_mensagem(f"Processado: {nome_arquivo}")
                else:
                    exibir_mensagem("Planilha não encontrada", f"A planilha '{planilha_escolhida}' não foi encontrada no arquivo {nome_arquivo}")
            
            except Exception as e:
                exibir_mensagem(f"Erro ao processar o arquivo {nome_arquivo}: {e}")

#=========================================================================================================================================================================================

        elif nome_arquivo == 'Finanças.xlsx':
            try:
                # Carregar o arquivo Excel para listar as planilhas
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names  # Lista as planilhas disponíveis
                
                # Pedir ao usuário para escolher a planilha
                planilha_escolhida = simpledialog.askstring(
                    "Escolha da Planilha",
                    f"As planilhas disponíveis para o arquivo {nome_arquivo} são:\n{planilhas}\n\nPor favor, insira o nome da planilha que deseja processar:"
                )
                
                if planilha_escolhida and planilha_escolhida in planilhas:
                    # Carregar o DataFrame da planilha escolhida
                    df_finanças = pd.read_excel(arquivo, sheet_name = 'Reports')

                    finanças = df_finanças.iloc[8:, 0:4]

                    # Renomeando as colunas para facilitar o acesso
                    finanças.columns = ['Nome do Funcionário', 'Valor de Vendas Líquidas', 'Valor das Taxas de Serviço', 'Receita Total']

                    # Realizando o cálculo da 'Taxa de Aproveitamento' a partir da segunda linha
                    finanças['Taxa de Aproveitamento'] = ((finanças['Valor de Vendas Líquidas'].iloc[1:] * 100) / finanças['Receita Total'].iloc[1:]) / 100

                    # Adicionando o cabeçalho na nova coluna
                    finanças.iloc[0, finanças.columns.get_loc('Taxa de Aproveitamento')] = 'Taxa de Aproveitamento'

                    # Armazenar o DataFrame no dicionário
                    dataframes[nome_arquivo] = finanças

                    finanças.to_excel(f'{nome_arquivo}', 
                                       sheet_name = 'Finanças dos funcionários.xlsx', 
                                       index = False)

                    exibir_mensagem(f"Processado: {nome_arquivo}")
                else:
                    exibir_mensagem("Planilha não encontrada", f"A planilha '{planilha_escolhida}' não foi encontrada no arquivo {nome_arquivo}")
            
            except Exception as e:
                exibir_mensagem(f"Erro ao processar o arquivo {nome_arquivo}: {e}")

#=========================================================================================================================================================================================

        elif nome_arquivo == 'Couvert.xlsx':
            try:
                # Carregar o arquivo Excel para listar as planilhas
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names  # Lista as planilhas disponíveis
                
                # Pedir ao usuário para escolher a planilha
                planilha_escolhida = simpledialog.askstring(
                    "Escolha da Planilha",
                    f"As planilhas disponíveis para o arquivo {nome_arquivo} são:\n{planilhas}\n\nPor favor, insira o nome da planilha que deseja processar:"
                )
                
                if planilha_escolhida and planilha_escolhida in planilhas:
                    # Carregar o DataFrame da planilha escolhida
                    df_valorcouvert = pd.read_excel(arquivo, sheet_name='Base Anulações')
                    df_couvert = pd.read_excel(arquivo, sheet_name='Consolidado')

                    # Selecionar os dados e converter para objeto
                    valor_couvert = df_valorcouvert.iloc[9, 2]
                    couvert = df_couvert.iloc[2:, 1:10]

                    couvert['Valor anulado couvert'] = valor_couvert
                    couvert['Porcentagem Anulados Salão'] = '=(G49/B49)'
                    couvert['Porcentagem Anulados Vasto Program 2'] = '=(H49/C49)'
                    couvert['Porcentagem Anulados Vasto Program 3'] = '=(I49/D49)'

                    # Armazenar o DataFrame no dicionário
                    dataframes[nome_arquivo] = couvert

                    couvert.to_excel(f'{nome_arquivo}', 
                                       sheet_name = 'Couvert Artístico.xlsx', 
                                       index = False)

                    exibir_mensagem(f"Processado: {nome_arquivo}")
                else:
                    exibir_mensagem("Planilha não encontrada", f"A planilha '{planilha_escolhida}' não foi encontrada no arquivo {nome_arquivo}")
            
            except Exception as e:
                exibir_mensagem(f"Erro ao processar o arquivo {nome_arquivo}: {e}")

#=========================================================================================================================================================================================

        elif nome_arquivo == 'Vinhos.xlsx':
            try:
                # Carregar o arquivo Excel para listar as planilhas
                excel_file = pd.ExcelFile(arquivo)
                planilhas = excel_file.sheet_names  # Lista as planilhas disponíveis
                
                # Pedir ao usuário para escolher a planilha
                planilha_escolhida = simpledialog.askstring(
                    "Escolha da Planilha",
                    f"As planilhas disponíveis para o arquivo {nome_arquivo} são:\n{planilhas}\n\nPor favor, insira o nome da planilha que deseja processar:"
                )
                
                if planilha_escolhida and planilha_escolhida in planilhas:
                    # Carregar o DataFrame da planilha escolhida
                    df_vinhos = pd.read_excel(arquivo, sheet_name = 'Reports')

                    vinhos = df_vinhos.iloc[909:1003, [0,1,9]]

                    vinhos.columns = ['Nome', 'Total de Vendas Brutas', 'Preço Médio']

                    # Armazenar o DataFrame no dicionário
                    dataframes[nome_arquivo] = vinhos

                    vinhos.to_excel(f'{nome_arquivo}', 
                                       sheet_name = 'Controle de Vinhos.xlsx', 
                                       index = False)

                    exibir_mensagem(f"Processado: {nome_arquivo}")
                else:
                    exibir_mensagem("Planilha não encontrada", f"A planilha '{planilha_escolhida}' não foi encontrada no arquivo {nome_arquivo}")
            
            except Exception as e:
                exibir_mensagem(f"Erro ao processar o arquivo {nome_arquivo}: {e}")

    return dataframes



#=========================================================================================================================================================================================

def juntar_planilhas():
    # Juntar as planilhas em uma só
    arquivos_excel = ['Operações diárias do mês.xlsx', 'Mix de vendas.xlsx', 'Finanças.xlsx', 'Couvert.xlsx', 'Vinhos.xlsx']

    arquivo_destino = 'Relatório Geral.xlsx'

    planilhas = {}

    nomes_folhas = ['Operações diárias do mês', 'Mix de vendas e funcionários', 'Finanças dos funcionários', 'Couvert Artistico', 'Controle de Vinhos']

    for arquivo, nome_folha in zip(arquivos_excel, nomes_folhas):
        try:
                    df = pd.read_excel(arquivo) 
        except Exception as e:
            raise ValueError(f"Erro ao ler o arquivo '{arquivo}': {str(e)}")
        planilhas[nome_folha] = df

    with pd.ExcelWriter(arquivo_destino) as writer:
        for nome_folha, df in planilhas.items():
            df.to_excel(writer, sheet_name = nome_folha, index = False)

    from openpyxl import load_workbook

    workbook = load_workbook('Relatório Geral.xlsx')

    sheet_ODM = workbook['Operações diárias do mês']

    # Adiciona a lista de valores na primeira linha da planilha
    linha1_ODM = [
        'Centros',
        'Vendas',
        'Contas'
    ]
    for col, valor in enumerate(linha1_ODM, start = 1):
        sheet_ODM.cell(row = 1, column = col, value = valor)

    # Adiciona a largura e altura das colunas
    largura_colunas = [
    14.00, 
    14.50, 
    9.00
    ]
    for i, largura in enumerate(largura_colunas, start = 1):
        sheet_ODM.column_dimensions[chr(64 + i)].width = largura

    # Converte a coluna J para Reais
    for row in range(1, sheet_ODM.max_row + 1): 
        cellODM = sheet_ODM[f'B{row}']  
        cellODM.number_format = 'R$ #,##0.00'

    # Adiciona as formatações da primeira linha
    formatar_linha1(sheet_ODM, cor_fundo = '9BC2E6', cor_fonte = '000000', cor_borda = '000000')

    # Adiciona as formatações das demais linhas escolhidas
    for linha in range(2,2001):
            for col in range(1, 4):
                celula = sheet_ODM.cell(row = linha, column = col)
                celula.fill = PatternFill(start_color='FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')
                celula.font = Font(color = '000000', name = 'calibri', size = 11, bold = False)
                celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = False)
                celula.border = Border(left = Side(style = 'thin', color = '000000'),
                                        right = Side(style = 'thin', color = '000000'),
                                        top = Side(style = 'thin', color = '000000'),
                                        bottom = Side(style = 'thin', color = '000000'))

    #=========================================================================================================================================================================================

    sheet_MVF = workbook['Mix de vendas e funcionários']

    # Adiciona a lista de valores na primeira linha da planilha
    linha1_MVF = [
        'Nome do funcionário', 
        'Nome do grupo de família', 
        'Nome do grupo principal',
        'Nº de Vendas',
        'Quantidade'
    ]
    for col, valor in enumerate(linha1_MVF, start = 1):
        sheet_MVF.cell(row = 1, column = col, value = valor)

    # Adiciona a largura e altura das colunas
    largura_colunas = [
    20.00, 
    24.00, 
    23.00,
    13.00,
    12.00
    ]
    for i, largura in enumerate(largura_colunas, start = 1):
        sheet_MVF.column_dimensions[chr(64 + i)].width = largura

    # Adiciona as formatações da primeira linha
    formatar_linha2(sheet_MVF, cor_fundo = '9BC2E6', cor_fonte = '000000', cor_borda = '000000')

    # Adiciona as formatações das demais linhas escolhidas
    for linha in range(2,2001):
            for col in range(1, 6):
                celula = sheet_MVF.cell(row = linha, column = col)
                celula.fill = PatternFill(start_color='FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')
                celula.font = Font(color = '000000', name = 'calibri', size = 11, bold = False)
                celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = False)
                celula.border = Border(left = Side(style = 'thin', color = '000000'),
                                        right = Side(style = 'thin', color = '000000'),
                                        top = Side(style = 'thin', color = '000000'),
                                        bottom = Side(style = 'thin', color = '000000'))

    #=========================================================================================================================================================================================
    sheet_FF = workbook['Finanças dos funcionários']

    # Adiciona a lista de valores na primeira linha da planilha
    linha1_FF = [
        'Nome do Funcionário', 
        'Valor de Vendas Líquidas', 
        'Valor das Taxas de Serviço', 
        'Receita Total', 
        'Taxa de Aproveitamento'
    ]
    for col, valor in enumerate(linha1_FF, start = 1):
        sheet_FF.cell(row = 1, column = col, value = valor)

    # Adiciona a largura e altura das colunas
    largura_colunas = [
    20.00, 
    23.00, 
    24.00,
    13.00,
    23.00
    ]
    for i, largura in enumerate(largura_colunas, start = 1):
        sheet_FF.column_dimensions[chr(64 + i)].width = largura

    # Converte a coluna J para Reais
    for row in range(1, sheet_FF.max_row + 1): 
        cellFF = sheet_FF[f'B{row}']  
        cellFF.number_format = 'R$ #,##0.00' 

    # Converte a coluna J para Reais
    for row in range(1, sheet_FF.max_row + 1): 
        cellFF = sheet_FF[f'C{row}']  
        cellFF.number_format = 'R$ #,##0.00' 

    # Converte a coluna J para Reais
    for row in range(1, sheet_FF.max_row + 1): 
        cellFF = sheet_FF[f'D{row}']  
        cellFF.number_format = 'R$ #,##0.00' 

    for row in range(1, sheet_FF.max_row + 1):
        cell_porcentoFF = sheet_FF[f'E{row}']
        cell_porcentoFF.number_format = '0.00%'

    sheet_FF.delete_rows(2)

    # Adiciona as formatações da primeira linha
    formatar_linha2(sheet_FF, cor_fundo = '9BC2E6', cor_fonte = '000000', cor_borda = '000000')

    # Adiciona as formatações das demais linhas escolhidas
    for linha in range(2,2001):
            for col in range(1, 6):
                celula = sheet_FF.cell(row = linha, column = col)
                celula.fill = PatternFill(start_color='FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')
                celula.font = Font(color = '000000', name = 'calibri', size = 11, bold = False)
                celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = False)
                celula.border = Border(left = Side(style = 'thin', color = '000000'),
                                        right = Side(style = 'thin', color = '000000'),
                                        top = Side(style = 'thin', color = '000000'),
                                        bottom = Side(style = 'thin', color = '000000'))

    #=========================================================================================================================================================================================
    sheet_couvert = workbook['Couvert Artistico']

    # Adiciona a lista de valores na primeira linha da planilha
    linha1_couvert = [
        'Quantidade de Vendas',
        '',
        '',
        '',
        '',
        'Quantidade de anulações',
        '',
        '',
        '']
    for col, valor in enumerate(linha1_couvert, start = 1):
        sheet_couvert.cell(row = 1, column = col, value = valor)

    # Adiciona a largura e altura das colunas
    largura_colunas = [
    20.86, 
    15.00, 
    9.00, 
    9.00, 
    8.43, 
    23.14, 
    15.00, 
    9.00, 
    9.00, 
    22.00, 
    26.43, 
    36.29, 
    36.29
    ]
    for i, largura in enumerate(largura_colunas, start = 1):
        sheet_couvert.column_dimensions[chr(64 + i)].width = largura

    # Aplica fórmula para as colunas selecionadas
    sheet_couvert['K2'] = '=(G49/B49)'
    sheet_couvert['L2'] = '=(H49/C49)' 
    sheet_couvert['M2'] = '=(I49/D49)'

    # Converte todas as linhas da coluna J para valores nulos (Pois estavam repetidos)
    for row in range(3, sheet_couvert.max_row + 1): 
        sheet_couvert[f'J{row}'] = None  

    # Converte a coluna J para Reais
    for row in range(1, sheet_couvert.max_row + 1): 
        cell_Jcouvert = sheet_couvert[f'J{row}']  
        cell_Jcouvert.number_format = 'R$ #,##0.00' 

    # Converte as colunas selecionadas para Porcentagem

    cell_porcento = sheet_couvert['K2']
    cell_porcento.number_format = '0.00%'  
    cell_porcento = sheet_couvert['L2']
    cell_porcento.number_format = '0.00%'  
    cell_porcento = sheet_couvert['M2']
    cell_porcento.number_format = '0.00%'

    # Adiciona as formatações da primeira linha
    formatar_linha(sheet_couvert, cor_fundo = '9BC2E6', cor_fonte = '000000', cor_borda = '000000')

    # Adiciona as formatações das demais linhas escolhidas
    for linha in range(2,2001):
            for col in range(1, 14):
                celula = sheet_couvert.cell(row = linha, column = col)
                celula.fill = PatternFill(start_color='FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')
                celula.font = Font(color = '000000', name = 'calibri', size = 11, bold = False)
                celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = False)
                celula.border = Border(left = Side(style = 'thin', color = '000000'),
                                        right = Side(style = 'thin', color = '000000'),
                                        top = Side(style = 'thin', color = '000000'),
                                        bottom = Side(style = 'thin', color = '000000'))
                
    #=========================================================================================================================================================================================

    sheet_vinhos = workbook['Controle de Vinhos']

    # Adiciona a lista de valores na primeira linha da planilha
    linha1_vinhos = [
        'Nome', 
        'Total de Vendas Brutas', 
        'Preço Médio'
    ]
    for col, valor in enumerate(linha1_vinhos, start = 1):
        sheet_vinhos.cell(row = 1, column = col, value = valor)

    # Adiciona a largura e altura das colunas
    largura_colunas = [
        22.00, 
        21.00, 
        13.00
    ]

    for i, largura in enumerate(largura_colunas, start = 1):
        sheet_vinhos.column_dimensions[chr(64 + i)].width = largura

    # Converte a coluna B para reais
    for row in range(1, sheet_vinhos.max_row + 1): 
        cell_Bvinho = sheet_vinhos[f'B{row}']  
        cell_Bvinho.number_format = 'R$ #,##0.00'

    # Converte a coluna C para reais
    for row in range(1, sheet_vinhos.max_row + 1): 
        cell_Cvinho = sheet_vinhos[f'C{row}']  
        cell_Cvinho.number_format = 'R$ #,##0.00' 

    # Adiciona as formatações da primeira linha
    formatar_linha1(sheet_vinhos, cor_fundo = '9BC2E6', cor_fonte = '000000', cor_borda = '000000')
    formatar_linha3(sheet_vinhos, cor_fundo = 'FFFFFF', cor_fonte = '000000', cor_borda = '000000')

    # Adiciona as formatações das demais linhas escolhidas
    for linha in range(3,2001):
            for col in range(1, 4):
                celula = sheet_vinhos.cell(row = linha, column = col)
                celula.fill = PatternFill(start_color='FFFFFF', end_color = 'FFFFFF', fill_type = 'solid')
                celula.font = Font(color = '000000', name = 'calibri', size = 11, bold = False)
                celula.alignment = Alignment(horizontal = 'center', vertical = 'center', wrap_text = False)
                celula.border = Border(left = Side(style = 'thin', color = '000000'),
                                        right = Side(style = 'thin', color = '000000'),
                                        top = Side(style = 'thin', color = '000000'),
                                        bottom = Side(style = 'thin', color = '000000'))

    # Salva a planilha
    workbook.save('Relatório Geral.xlsx')

    exibir_mensagem(f"Processado: {arquivo_destino}")
#=========================================================================================================================================================================================
    

# Criar a janela principal
janela = tk.Tk()
janela.title("Selecionar Arquivos")
janela.geometry("900x800")


# Criar botão para selecionar arquivos
btn_selecionar = tk.Button(janela, text = "Selecionar Arquivos", command = selecionar_arquivos)
btn_selecionar.pack(pady = 20)



# Legenda acima da caixa de mensagens
label_mensagens = tk.Label(janela, text="Arquivos selecionados:")
label_mensagens.pack(pady=5)
# Criar uma lista para exibir os arquivos selecionados
lista_arquivos = tk.Listbox(janela, width = 100, height = 15)
lista_arquivos.pack(pady = 10)


# Criar botão para processar arquivos
btn_processar = tk.Button(janela, text = "Processar planilhas", command = processar_arquivos)
btn_processar.pack(pady = 20)

# Legenda acima da caixa de mensagens
label_mensagens = tk.Label(janela, text="Progresso dos arquivos:")
label_mensagens.pack(pady=5)
# Campo de texto para exibir as mensagens de progresso
campo_texto = tk.Text(janela, height=10, width=60)
campo_texto.pack(pady=10)

# Criar botão para processar arquivos
btn_processar = tk.Button(janela, text = "Juntar todas as planilhas \n (Obs: Use apenas depois das planilhas serem processadas)", command = juntar_planilhas)
btn_processar.pack(pady = 20)

# Iniciar o loop da interface
janela.mainloop()
